{
  "components": {
    "schemas": {
      "Buffer": {
        "id": "Buffer",
        "type": "string",
        "format": "binary"
      }
    }
  },
  "info": {
    "title": "RISE Node",
    "version": "1.2.0",
    "description": "## Rise-node version 1.2.0\n\n# RISE\n[![Build Status](https://travis-ci.org/RiseVision/rise-node.svg?branch=development)](https://travis-ci.org/RiseVision/rise-node) [![Coverage Status](https://coveralls.io/repos/github/RiseVision/rise-node/badge.svg?branch=development)](https://coveralls.io/github/RiseVision/rise-node?branch=development) \n## Installation\n\nAn automatic install script for Ubuntu is available.\n\n### Wiki \n\nFor detailed information on node installation and management please refer to the [wiki of this repository](https://github.com/RiseVision/rise-node/wiki).\n\n### Quick start Rise installation (Mainnet)\n\nFirst, perform some basic checks:\n\n- MAKE SURE NOT TO RUN AS ROOT OR WITH SUDO\n- Your user will need sudo privileges, though\n- PostgresSQL must **not** be installed on your server\n\nThen go home:\n\n```\ncd $HOME\n```\n\nDownload the installer:\n\n```\nwget https://raw.githubusercontent.com/RiseVision/rise-build/master/scripts/install.sh\n```\n\nInstall Rise:\n```\nbash install.sh install -r mainnet -u https://downloads.rise.vision/core/mainnet/latest.tar.gz\n```\n\nThe installer will start the node automatically if installation was successful.\n\n(Optional) Fast sync from a snapshot\n\n```\ncd rise\nwget https://downloads.rise.vision/snapshots/mainnet/latest -O latestsnap.gz\n./manager.sh restoreBackup latestsnap.gz\n```\n\n## Basic node management\n\nInstaller will create a `rise` folder in your homedir. Make sure to `cd` to this dir when managing your node.\n\n\nCheck the status of your node with:\n```\n./manager.sh status\n```\n\nStop node with: \n```\n./manager.sh stop node\n```\n\nInsert your passphrase so you can forge:\n```\nnano etc/node_config.json\n```\n\nAnd change this section to include your passphrase:\n```\n{\n  \"fileLogLevel\": \"error\",\n  \"forging\": {\n    \"secret\": [ \"my secret\" ],\n    \"access\": {\n      \"whiteList\": [ \"127.0.0.1\" ]\n    }\n  }\n}\n```\n\nAnd finally restart your node to apply the changes:\n```\n./manager.sh reload node\n```\n\n### Quick start Rise installation (Testnet) \nThe same as above, only the install step is different:\n```\nbash install.sh install -r testnet -u https://downloads.rise.vision/core/testnet/latest.tar.gz\n```\n\n\n(Optional) Fast sync from a snapshot\n\n```\nwget https://downloads.rise.vision/snapshots/testnet/latest -O latestsnap.gz\n./manager.sh restoreBackup latestsnap.gz\n```\n\n## Authors\n- Andrea B. <vekexasia+crypto@gmail.com>\n- Jan <lepetitjan@icloud.com>\n- Mariusz Serek <mariusz@serek.net>\n- Goldeneye (Shift Team)\n- Ralfs (Shift Team)\n- Joey <shiftcurrency@gmail.com>\n- Boris Povod <boris@crypti.me>\n- Pavel Nekrasov <landgraf.paul@gmail.com>\n- Sebastian Stupurac <stupurac.sebastian@gmail.com>\n- Oliver Beddows <oliver@lightcurve.io>\n- Isabella Dell <isabella@lightcurve.io>\n- Marius Serek <mariusz@serek.net>\n- Maciej Baj <maciej@lightcurve.io>\n\n## License\n\nCopyright © 2017 Rise<br>\nCopyright © 2016-2017 Shift<br>  \nCopyright © 2016-2017 Lisk Foundation\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the [GNU General Public License](https://github.com/RiseVision/rise-node/src/master/LICENSE) along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n***\n\nThis program also incorporates work previously released with lisk `0.7.0` (and earlier) versions under the [MIT License](https://opensource.org/licenses/MIT). To comply with the requirements of that license, the following permission notice, applicable to those parts of the code only, is included below:\n\nCopyright © 2017 Rise<br>\nCopyright © 2016-2017 Shift<br>\nCopyright © 2016-2017 Lisk Foundation<br>  \nCopyright © 2015 Crypti\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/accounts/": {
      "get": {
        "operationId": "AccountsAPI.getAccount",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getAccount",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getAccount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Account",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account object by its address or public key",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getAccount('8093718274007724701R')\n  .then(function({ account }) {\n    console.log(account.balance) // 2973803650603\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/accounts/getBalance": {
      "get": {
        "operationId": "AccountsAPI.getBalance",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getBalance",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getBalance"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getBalance"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Balance",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account's RISE balance its address",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getBalance('8093718274007724701R')\n  .then(function({ balance }) {\n    console.log(balance) // 2973803650603\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/accounts/getPublicKey": {
      "get": {
        "operationId": "AccountsAPI.getPublickey",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getPublickey",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getPublickey"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getPublickey"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Public Key",
        "tags": [
          "Accounts API"
        ],
        "description": "Retrieve an account's public key by its address",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getPublicKey('8093718274007724701R')\n  .then(function({ publicKey }) {\n    console.log(publicKey) // \"7067a911f3a4...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/accounts/delegates": {
      "get": {
        "operationId": "AccountsAPI.getDelegates",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getDelegates",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getDelegates"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getDelegates"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Account Delegates",
        "tags": [
          "Accounts API"
        ],
        "description": "Fetch a list of delegates a certain account has voted for",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.accounts\n  .getDelegates('8093718274007724701R')\n  .then(function({ delegates }) {\n    console.log(delegates[0].publicKey) // \"5d3c3c5cdead6...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      },
      "put": {
        "operationId": "AccountsAPI.addDelegate",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Delegate",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/accounts/delegates/fee": {
      "get": {
        "operationId": "AccountsAPI.getDelegatesFee",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.getDelegatesFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.getDelegatesFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.getDelegatesFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegates Fee",
        "tags": [
          "Accounts API"
        ],
        "description": "\nGet the fee for registering as a delegate at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "x-code-samples": []
      }
    },
    "/api/accounts/top": {
      "get": {
        "operationId": "AccountsAPI.topAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "accounts.top",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/accounts.top"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.accounts.top"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.error"
                }
              }
            },
            "description": "Top Accounts is not enabled"
          }
        },
        "summary": "Get Top Accounts",
        "tags": [
          "Accounts API"
        ],
        "description": "\nGet a list of accounts sorted by descending balance.\n_Top accounts must be enabled on the providing node_\n",
        "x-code-samples": []
      }
    },
    "/api/accounts/open": {
      "post": {
        "operationId": "AccountsAPI.open",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accounts.openAccount"
              }
            }
          },
          "description": "accounts.openAccount",
          "required": false
        },
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Open Account",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/accounts/generatePublicKey": {
      "post": {
        "operationId": "AccountsAPI.generatePublicKey",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Generate Public Key",
        "tags": [
          "Accounts API"
        ],
        "description": "\n_**Deprecated**: Please use a client library like\n[vekexasia/dpos-offline](https://github.com/vekexasia/dpos-offline)\nto generate public keys_. Generates a public key.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/blocks/": {
      "get": {
        "operationId": "BlocksAPI.getBlocks",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getBlocks",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getBlocks"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBlocks"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Block List",
        "tags": [
          "Blocks API"
        ],
        "description": "Retrieve blocks from the RISE blockchain. Defaults to last 100 blocks",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getBlocks({ limit: 3 })\n  .then(function({ blocks }) {\n    console.log(blocks[0].id) // 1359353064084280533\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/get": {
      "get": {
        "operationId": "BlocksAPI.getBlock",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getBlock",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getBlock"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBlock"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Block",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch block by block id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getBlock('1359353064084280533')\n  .then(function({ block }) {\n    console.log(block.id) // 1359353064084280533\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getHeight": {
      "get": {
        "operationId": "BlocksAPI.getHeight",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getHeight"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Height",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch current blockchain height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getHeight()\n  .then(function({ height }) {\n    console.log(height) // 1356378\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getBroadhash": {
      "get": {
        "operationId": "BlocksAPI.getBroadHash",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getBroadHash"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Broadhash",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the current broadhash from the network",
        "x-code-samples": []
      }
    },
    "/api/blocks/getEpoch": {
      "get": {
        "operationId": "BlocksAPI.getEpoch",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getEpoch"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Epoch",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the RISE epoch time in ISO8601 format",
        "x-code-samples": []
      }
    },
    "/api/blocks/getFee": {
      "get": {
        "operationId": "BlocksAPI.getFee",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Send Fee",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch the fee for sending a transaction at a certain height. Defaults to current height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getFee()\n  .then(function({ fee }) {\n    console.log(fee) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getFees": {
      "get": {
        "operationId": "BlocksAPI.getFees",
        "parameters": [
          {
            "in": "query",
            "name": "blocks.getFees",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/blocks.getFees"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getFees"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Fee Schedule",
        "tags": [
          "Blocks API"
        ],
        "description": "Fetch fees for all transaction types at a certain height. Defaults to current height",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getFeeSchedule()\n  .then(function({ fees }) {\n    console.log(fees.send) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getNethash": {
      "get": {
        "operationId": "BlocksAPI.getNethash",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getNethash"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Nethash",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the Nethash from the network",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getNethash()\n  .then(function({ nethash }) {\n    console.log(nethash) // cd8171332c...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getMilestone": {
      "get": {
        "operationId": "BlocksAPI.getMilestone",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getMilestone"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Milestone",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current milestone in reference to rewards for mining",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getMilestone()\n  .then(function({ milestone }) {\n    console.log(milestone) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getReward": {
      "get": {
        "operationId": "BlocksAPI.getReward",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getReward"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Reward",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current reward for mining a block",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getReward()\n  .then(function({ reward }) {\n    console.log(reward) // 1200000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getSupply": {
      "get": {
        "operationId": "BlocksAPI.getSupply",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getSupply"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Supply",
        "tags": [
          "Blocks API"
        ],
        "description": "Get the current RISE token supply",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getSupply()\n  .then(function({ supply }) {\n    console.log(supply) // 12943860841000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/blocks/getStatus": {
      "get": {
        "operationId": "BlocksAPI.getStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.blocks.getStatus"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Blockchain Status",
        "tags": [
          "Blocks API"
        ],
        "description": "Get collected blockchain status information",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.blocks\n  .getStatus()\n  .then(function({ height }) {\n    console.log(height) // 1356378\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/": {
      "get": {
        "operationId": "DelegatesAPI.getDelegates",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getDelegates",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getDelegates"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getDelegates"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate List",
        "tags": [
          "Delegates API"
        ],
        "description": "\nGet list of delegates sorted by rank.\nDefaults to top 101 delegates (e.g. active delegates)\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getList()\n  .then(function({ delegates }) {\n    console.log(delegates[0].username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      },
      "put": {
        "operationId": "DelegatesAPI.createDelegate",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Delegate",
        "tags": [
          "Delegates API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nRegisters a delegate.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/delegates/fee": {
      "get": {
        "operationId": "DelegatesAPI.getFee",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getFee"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegates Fee",
        "tags": [
          "Delegates API"
        ],
        "description": "\nGet the fee for registering as a delegate at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "x-code-samples": []
      }
    },
    "/api/delegates/forging/getForgedByAccount": {
      "get": {
        "operationId": "DelegatesAPI.getForgedByAccount",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getForgedByAccount",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getForgedByAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getForgedByAccount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Forged by Account",
        "tags": [
          "Delegates API"
        ],
        "description": "Get earnings from forging by account public key",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getForgedByAccount(\n    '7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0'\n  )\n  .then(function({ forged }) {\n    console.log(forged) // 19066025346961\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/get": {
      "get": {
        "operationId": "DelegatesAPI.getDelegate",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getDelegate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getDelegate"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getDelegate"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve delegate account and associated stats by public key or username",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getByPublicKey(\n    '7067a911f3a4e13facbae9006b52a0c3ac9824bdd9f37168303152ae49dcb1c0'\n  )\n  .then(function({ delegate }) {\n    console.log(delegate.username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/voters": {
      "get": {
        "operationId": "DelegatesAPI.getVoters",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.getVoters",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.getVoters"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getVoters"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Voters",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve a list of accounts which voted for a delegate",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getVoters('a65a8160b1e0733f66d1f1a8f322c9af29b26d5e491a84d6e3ae0ec43e000446')\n  .then(function({ accounts }) {\n    console.log(accounts.length) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/search": {
      "get": {
        "operationId": "DelegatesAPI.search",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.search"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.search"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Search Delegates",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve a list of delegates whose usernames are like the search query",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .search({ q: 'pool' })\n  .then(function({ delegates }) {\n    console.log(delegates[0].username) // official_pool\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/count": {
      "get": {
        "operationId": "DelegatesAPI.count",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.count"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Delegate Count",
        "tags": [
          "Delegates API"
        ],
        "description": "Retrieve the total number of registered delegates",
        "x-code-samples": []
      }
    },
    "/api/delegates/getNextForgers": {
      "get": {
        "operationId": "DelegatesAPI.getNextForgers",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getNextForgers"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Next Forgers",
        "tags": [
          "Delegates API"
        ],
        "description": "\nRetrieve the current slot and block to be forged,\nas well as the list of the next delegates' public keys in the round (defaults to 10)\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getNextForgers()\n  .then(function({ delegates }) {\n    console.log(delegates[0]) // a65a8160b1e07...\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/forging/status": {
      "get": {
        "operationId": "DelegatesAPI.getForgingStatus",
        "parameters": [
          {
            "in": "query",
            "name": "delegates.forgingStatus",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/delegates.forgingStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.getForgingStatus"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Get Forging Status",
        "tags": [
          "Delegates API"
        ],
        "description": "\nChecks to see if forging is enabled for the network or a public key if provided.\n_Forging APIs must be enabled on the providing node_\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.delegates\n  .getForgingStatus()\n  .then(function({ enabled }) {\n    console.log(enabled) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/delegates/forging/enable": {
      "post": {
        "operationId": "DelegatesAPI.forgingEnable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegates.disableForging"
              }
            }
          },
          "description": "delegates.disableForging",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.forgingEnable"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Enable Forging",
        "tags": [
          "Delegates API"
        ],
        "description": "\nEnable forging for a secret / public key pair.\n_Forging APIs must be enabled on the providing node_\n",
        "x-code-samples": []
      }
    },
    "/api/delegates/forging/disable": {
      "post": {
        "operationId": "DelegatesAPI.forgingDisable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delegates.disableForging"
              }
            }
          },
          "description": "delegates.disableForging",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.forgingDisable"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.delegates.accessDenied"
                }
              }
            },
            "description": "Delegates API Access Denied"
          }
        },
        "summary": "Disable Forging",
        "tags": [
          "Delegates API"
        ],
        "description": "\nDisable forging for a secret / public key pair.\n_Forging APIs must be enabled on the providing node_\n",
        "x-code-samples": []
      }
    },
    "/api/loader/status/": {
      "get": {
        "operationId": "LoaderAPI.getStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.getStatus"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Loader Status",
        "tags": [
          "Loader API"
        ],
        "description": "Check to see if blockchain has been loaded by node",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.loader\n  .status()\n  .then(function({ loaded }) {\n    console.log(loaded) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/loader/status/sync": {
      "get": {
        "operationId": "LoaderAPI.getStatusSync",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.getStatusSync"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Loader Sync Status",
        "tags": [
          "Loader API"
        ],
        "description": "Retrieve current status of node's blockchain sync",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.loader\n  .syncStatus()\n  .then(function({ syncing }) {\n    console.log(syncing) // false\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/loader/status/ping": {
      "get": {
        "operationId": "LoaderAPI.ping",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.loader.ping"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Ping",
        "tags": [
          "Loader API"
        ],
        "description": "Ping node to see if capable of syncing quickly enough (within two blocks)",
        "x-code-samples": []
      }
    },
    "/api/multisignatures/accounts": {
      "get": {
        "operationId": "MultisignatureAPI.getAccounts",
        "parameters": [
          {
            "in": "query",
            "name": "multisignatures.getAccounts",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/multisignatures.getAccounts"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.multisignatures.getAccounts"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Accounts",
        "tags": [
          "Multisignature API"
        ],
        "description": "Retrieve accounts belonging to multisignature wallet",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.multiSignatures\n  .getAccounts(\n    '05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328'\n  )\n  .then(function({ accounts }) {\n    console.log(accounts[0].address) // 6507244540548668920R\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/multisignatures/pending": {
      "get": {
        "operationId": "MultisignatureAPI.getPending",
        "parameters": [
          {
            "in": "query",
            "name": "multisignatures.pending",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/multisignatures.pending"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.multisignatures.getPending"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Pending Transactions",
        "tags": [
          "Multisignature API"
        ],
        "description": "Retrieve pending transactions on a multisignature wallet",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.multiSignatures\n  .getPending(\n    '05e5b4cbe7aa75eaf80cca6a085a35f5f20be68e1d08b98b1dd32b2c108fc328'\n  )\n  .then(function({ signed }) {\n    console.log(signed) // true\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/multisignatures/sign": {
      "post": {
        "operationId": "MultisignatureAPI.sign",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Sign",
        "tags": [
          "Multisignature API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nSign a transaction with a multisignature wallet.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/multisignatures/": {
      "put": {
        "operationId": "MultisignatureAPI.addMultisignature",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Multisignature",
        "tags": [
          "Multisignature API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nAdd a multisignature wallet.\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/peers/": {
      "get": {
        "operationId": "PeersAPI.getPeers",
        "parameters": [
          {
            "in": "query",
            "name": "peer.getPeers",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/peer.getPeers"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.getPeers"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer List",
        "tags": [
          "Peers API"
        ],
        "description": "Retrieve a list of peers connected to the node",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .getList()\n  .then(function({ peers }) {\n    console.log(peers.length) // 5\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/peers/get": {
      "get": {
        "operationId": "PeersAPI.getPeer",
        "parameters": [
          {
            "in": "query",
            "name": "peer.getPeer",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/peer.getPeer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.getPeer"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer",
        "tags": [
          "Peers API"
        ],
        "description": "Retrieve a peer by IP address and port",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .getByIPPort({ ip: '45.32.178.6', port: 5555 })\n  .then(function({ peer }) {\n    console.log(peer.version) // 1.0.3\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/peers/count": {
      "get": {
        "operationId": "PeersAPI.count",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.count"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Peer Count",
        "tags": [
          "Peers API"
        ],
        "description": "Get total number of peers connected, disconnected and banned",
        "x-code-samples": []
      }
    },
    "/api/peers/version": {
      "get": {
        "operationId": "PeersAPI.version",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.peers.version"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Node Version",
        "tags": [
          "Peers API"
        ],
        "description": "Get node version information",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.peers\n  .version()\n  .then(function({ version }) {\n    console.log(version) // 1.1.1\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/signatures/fee": {
      "get": {
        "operationId": "SignaturesAPI.fees",
        "parameters": [
          {
            "in": "query",
            "name": "signatures.getFee",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/signatures.getFee"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.signatures.fees"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Signature Fee",
        "tags": [
          "Signatures API"
        ],
        "description": "\nGet the fee for adding a second signature at a certain height of the blockchain\n(omit the height for the current fee).\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.signatures\n  .getSecondSignatureFee()\n  .then(function({ fee }) {\n    console.log(fee) // 500000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/signatures/": {
      "put": {
        "operationId": "SignaturesAPI.addSignature",
        "responses": {
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.deprecated"
                }
              }
            },
            "description": "Deprecated API Error"
          }
        },
        "summary": "Add Signature",
        "tags": [
          "Signatures API"
        ],
        "description": "\n_**Deprecated**: Please use the [Transactions API](#tag/Transactions-API)_.\nAdds a second signature to an account\n",
        "deprecated": true,
        "x-code-samples": []
      }
    },
    "/api/transactions": {
      "get": {
        "operationId": "TransactionsAPI.getTransactions",
        "parameters": [
          {
            "in": "query",
            "name": "",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "\nFetch a list of transactions and the count of transactions matching the query.\nDefaults to the last 100 transactions.\n",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getList()\n  .then(function({ count }) {\n    console.log(count) // 563381\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      },
      "post": {
        "operationId": "TransactionsAPI.localCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactions.addTransactions"
              }
            }
          },
          "description": "transactions.addTransactions",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.localCreate"
                }
              }
            },
            "description": ""
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.general.accessDenied"
                }
              }
            },
            "description": "Secure API Access Denied"
          }
        },
        "summary": "Add Local Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "\nAdd a transaction to the node's local transaction List\n_Secure APIs must be enabled on the providing node_\n",
        "x-code-samples": []
      },
      "put": {
        "operationId": "TransactionsAPI.put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transactions.put"
              }
            }
          },
          "description": "transactions.put",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.put"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Add Transactions",
        "tags": [
          "Transactions API"
        ],
        "description": "Add one or multiple transactions to the transaction queue",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .put({\n    type: 0,\n    senderPublicKey: \"bf4809a1a08c9dffbba741f0c7b9f49145602341d5fa306fb3cd592d3e1058b3\",\n    senderId: \"1644223775232371040R\",\n    recipientId: \"3303015780877366956R\",\n    amount: 199533766861,\n    fee: 10000000\n    ...\n  })\n  .then(function({ accepted }) {\n    console.log(accepted.length) // 1\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/transactions/count": {
      "get": {
        "operationId": "TransactionsAPI.getCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getCount"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction Count",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve the current number of transactions confirmed, unconfirmed, queued and multisignature",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .count()\n  .then(function({ confirmed }) {\n    console.log(confirmed) // 563381\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/transactions/get": {
      "get": {
        "operationId": "TransactionsAPI.getTX",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getTransaction",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getTransaction"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a transaction by transaction id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getTransaction('6920969059388666996')\n  .then(function({ transaction }) {\n    console.log(transaction.type) // 0\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/transactions/multisignatures": {
      "get": {
        "operationId": "TransactionsAPI.getMultiSigs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getMultiSigs"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of multisignature transactions and the count of transactions matching the query.",
        "x-code-samples": []
      }
    },
    "/api/transactions/multisignatures/get": {
      "get": {
        "operationId": "TransactionsAPI.getMultiSig",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getMultiSig"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Multisignature Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a multisignature transaction by transaction id",
        "x-code-samples": []
      }
    },
    "/api/transactions/queued": {
      "get": {
        "operationId": "TransactionsAPI.getQueuedTxs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getQueuedTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Queued Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of queued transactions and the count of transactions matching the query.",
        "x-code-samples": []
      }
    },
    "/api/transactions/queued/get": {
      "get": {
        "operationId": "TransactionsAPI.getQueuedTx",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getQueuedTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Queued Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a queued transaction by transaction id",
        "x-code-samples": []
      }
    },
    "/api/transactions/unconfirmed": {
      "get": {
        "operationId": "TransactionsAPI.getUnconfirmedTxs",
        "parameters": [
          {
            "in": "query",
            "name": "transactions.getPooledTransactions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/transactions.getPooledTransactions"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getUnconfirmedTransactions"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Unconfirmed Transaction List",
        "tags": [
          "Transactions API"
        ],
        "description": "Retrieve a list of unconfirmed transactions and the count of transactions matching the query.",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getUnconfirmedTransactions()\n  .then(function({ count }) {\n    console.log(count) // 3\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    },
    "/api/transactions/unconfirmed/get": {
      "get": {
        "operationId": "TransactionsAPI.getUnconfirmedTx",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responses.transactions.getUnconfirmedTransaction"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get Unconfirmed Transaction",
        "tags": [
          "Transactions API"
        ],
        "description": "Fetch a unconfirmed transaction by transaction id",
        "x-code-samples": [
          {
            "lang": "javascript",
            "source": "import { rise } from 'risejs'\n\nrise.transactions\n  .getUnconfirmedTransaction('6920969059388666996')\n  .then(function({ transaction }) {\n    console.log(transaction.fee) // 10000000\n  })\n  .catch(function(err) {\n    console.log('Error: ', err) // handle error\n  })\n"
          }
        ]
      }
    }
  },
  "x-servers": [
    {
      "url": "https://wallet.rise.vision",
      "description": "Mainnet"
    },
    {
      "url": "http://localhost:5566",
      "description": "Local Testnet"
    }
  ]
}